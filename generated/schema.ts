// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DailyBond extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyBond entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyBond entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyBond", id.toString(), this);
    }
  }

  static load(id: string): DailyBond | null {
    return changetype<DailyBond | null>(store.get("DailyBond", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}

export class Ohmie extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ohmie entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ohmie entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ohmie", id.toString(), this);
    }
  }

  static load(id: string): Ohmie | null {
    return changetype<Ohmie | null>(store.get("Ohmie", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get historicBalance(): Array<string> {
    let value = this.get("historicBalance");
    return value!.toStringArray();
  }

  set historicBalance(value: Array<string>) {
    this.set("historicBalance", Value.fromStringArray(value));
  }

  get lastBalance(): string | null {
    let value = this.get("lastBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastBalance(value: string | null) {
    if (!value) {
      this.unset("lastBalance");
    } else {
      this.set("lastBalance", Value.fromString(<string>value));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class OhmieBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ohmie", Value.fromString(""));
    this.set("sohmBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("bondBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dollarBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OhmieBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OhmieBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OhmieBalance", id.toString(), this);
    }
  }

  static load(id: string): OhmieBalance | null {
    return changetype<OhmieBalance | null>(store.get("OhmieBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ohmie(): string {
    let value = this.get("ohmie");
    return value!.toString();
  }

  set ohmie(value: string) {
    this.set("ohmie", Value.fromString(value));
  }

  get sohmBalance(): BigDecimal {
    let value = this.get("sohmBalance");
    return value!.toBigDecimal();
  }

  set sohmBalance(value: BigDecimal) {
    this.set("sohmBalance", Value.fromBigDecimal(value));
  }

  get ohmBalance(): BigDecimal {
    let value = this.get("ohmBalance");
    return value!.toBigDecimal();
  }

  set ohmBalance(value: BigDecimal) {
    this.set("ohmBalance", Value.fromBigDecimal(value));
  }

  get bondBalance(): BigDecimal {
    let value = this.get("bondBalance");
    return value!.toBigDecimal();
  }

  set bondBalance(value: BigDecimal) {
    this.set("bondBalance", Value.fromBigDecimal(value));
  }

  get dollarBalance(): BigDecimal {
    let value = this.get("dollarBalance");
    return value!.toBigDecimal();
  }

  set dollarBalance(value: BigDecimal) {
    this.set("dollarBalance", Value.fromBigDecimal(value));
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (!value) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bonds(): Array<string> | null {
    let value = this.get("bonds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bonds(value: Array<string> | null) {
    if (!value) {
      this.unset("bonds");
    } else {
      this.set("bonds", Value.fromStringArray(<Array<string>>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DepositYearDaiEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositYearDaiEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearDaiEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearDaiEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearDaiEntity | null {
    return changetype<DepositYearDaiEntity | null>(
      store.get("DepositYearDaiEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositYearETHEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositYearETHEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearETHEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearETHEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearETHEntity | null {
    return changetype<DepositYearETHEntity | null>(
      store.get("DepositYearETHEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositYearFraxEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositYearFraxEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearFraxEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearFraxEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearFraxEntity | null {
    return changetype<DepositYearFraxEntity | null>(
      store.get("DepositYearFraxEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositYearLusdEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositYearLusdEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearLusdEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearLusdEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearLusdEntity | null {
    return changetype<DepositYearLusdEntity | null>(
      store.get("DepositYearLusdEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositYearEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("newBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("initBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("addition", Value.fromBoolean(false));
    this.set("adjustment", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositYearEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearEntity | null {
    return changetype<DepositYearEntity | null>(
      store.get("DepositYearEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get newBCV(): BigDecimal {
    let value = this.get("newBCV");
    return value!.toBigDecimal();
  }

  set newBCV(value: BigDecimal) {
    this.set("newBCV", Value.fromBigDecimal(value));
  }

  get initBCV(): BigDecimal {
    let value = this.get("initBCV");
    return value!.toBigDecimal();
  }

  set initBCV(value: BigDecimal) {
    this.set("initBCV", Value.fromBigDecimal(value));
  }

  get addition(): boolean {
    let value = this.get("addition");
    return value!.toBoolean();
  }

  set addition(value: boolean) {
    this.set("addition", Value.fromBoolean(value));
  }

  get adjustment(): BigDecimal {
    let value = this.get("adjustment");
    return value!.toBigDecimal();
  }

  set adjustment(value: BigDecimal) {
    this.set("adjustment", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositYearOHMFRAXEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositYearOHMFRAXEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearOHMFRAXEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearOHMFRAXEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearOHMFRAXEntity | null {
    return changetype<DepositYearOHMFRAXEntity | null>(
      store.get("DepositYearOHMFRAXEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositYearOHMLUSDEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("dayDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositYearOHMLUSDEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositYearOHMLUSDEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositYearOHMLUSDEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositYearOHMLUSDEntity | null {
    return changetype<DepositYearOHMLUSDEntity | null>(
      store.get("DepositYearOHMLUSDEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get dayDeposit(): Array<string> {
    let value = this.get("dayDeposit");
    return value!.toStringArray();
  }

  set dayDeposit(value: Array<string>) {
    this.set("dayDeposit", Value.fromStringArray(value));
  }
}

export class DepositDayEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("newBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("initBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("addition", Value.fromBoolean(false));
    this.set("adjustment", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("hourDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositDayEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositDayEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositDayEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositDayEntity | null {
    return changetype<DepositDayEntity | null>(
      store.get("DepositDayEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get newBCV(): BigDecimal {
    let value = this.get("newBCV");
    return value!.toBigDecimal();
  }

  set newBCV(value: BigDecimal) {
    this.set("newBCV", Value.fromBigDecimal(value));
  }

  get initBCV(): BigDecimal {
    let value = this.get("initBCV");
    return value!.toBigDecimal();
  }

  set initBCV(value: BigDecimal) {
    this.set("initBCV", Value.fromBigDecimal(value));
  }

  get addition(): boolean {
    let value = this.get("addition");
    return value!.toBoolean();
  }

  set addition(value: boolean) {
    this.set("addition", Value.fromBoolean(value));
  }

  get adjustment(): BigDecimal {
    let value = this.get("adjustment");
    return value!.toBigDecimal();
  }

  set adjustment(value: BigDecimal) {
    this.set("adjustment", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get hourDeposit(): Array<string> {
    let value = this.get("hourDeposit");
    return value!.toStringArray();
  }

  set hourDeposit(value: Array<string>) {
    this.set("hourDeposit", Value.fromStringArray(value));
  }
}

export class DepositHourEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("newBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("initBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("addition", Value.fromBoolean(false));
    this.set("adjustment", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("minuteDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositHourEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositHourEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositHourEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositHourEntity | null {
    return changetype<DepositHourEntity | null>(
      store.get("DepositHourEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newBCV(): BigDecimal {
    let value = this.get("newBCV");
    return value!.toBigDecimal();
  }

  set newBCV(value: BigDecimal) {
    this.set("newBCV", Value.fromBigDecimal(value));
  }

  get initBCV(): BigDecimal {
    let value = this.get("initBCV");
    return value!.toBigDecimal();
  }

  set initBCV(value: BigDecimal) {
    this.set("initBCV", Value.fromBigDecimal(value));
  }

  get addition(): boolean {
    let value = this.get("addition");
    return value!.toBoolean();
  }

  set addition(value: boolean) {
    this.set("addition", Value.fromBoolean(value));
  }

  get adjustment(): BigDecimal {
    let value = this.get("adjustment");
    return value!.toBigDecimal();
  }

  set adjustment(value: BigDecimal) {
    this.set("adjustment", Value.fromBigDecimal(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get minuteDeposit(): Array<string> {
    let value = this.get("minuteDeposit");
    return value!.toStringArray();
  }

  set minuteDeposit(value: Array<string>) {
    this.set("minuteDeposit", Value.fromStringArray(value));
  }
}

export class DepositMinuteEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("newBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("initBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("addition", Value.fromBoolean(false));
    this.set("adjustment", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
    this.set("secondDeposit", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositMinuteEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositMinuteEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositMinuteEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositMinuteEntity | null {
    return changetype<DepositMinuteEntity | null>(
      store.get("DepositMinuteEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newBCV(): BigDecimal {
    let value = this.get("newBCV");
    return value!.toBigDecimal();
  }

  set newBCV(value: BigDecimal) {
    this.set("newBCV", Value.fromBigDecimal(value));
  }

  get initBCV(): BigDecimal {
    let value = this.get("initBCV");
    return value!.toBigDecimal();
  }

  set initBCV(value: BigDecimal) {
    this.set("initBCV", Value.fromBigDecimal(value));
  }

  get addition(): boolean {
    let value = this.get("addition");
    return value!.toBoolean();
  }

  set addition(value: boolean) {
    this.set("addition", Value.fromBoolean(value));
  }

  get adjustment(): BigDecimal {
    let value = this.get("adjustment");
    return value!.toBigDecimal();
  }

  set adjustment(value: BigDecimal) {
    this.set("adjustment", Value.fromBigDecimal(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }

  get secondDeposit(): Array<string> {
    let value = this.get("secondDeposit");
    return value!.toStringArray();
  }

  set secondDeposit(value: Array<string>) {
    this.set("secondDeposit", Value.fromStringArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("maxPremium", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("expires", Value.fromBigInt(BigInt.zero()));
    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedDAI", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedFRAX", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedLUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedOHMDAI", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedOHMFRAX", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("depositCount", Value.fromBigInt(BigInt.zero()));
    this.set("redeemCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get maxPremium(): BigDecimal {
    let value = this.get("maxPremium");
    return value!.toBigDecimal();
  }

  set maxPremium(value: BigDecimal) {
    this.set("maxPremium", Value.fromBigDecimal(value));
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get expires(): BigInt {
    let value = this.get("expires");
    return value!.toBigInt();
  }

  set expires(value: BigInt) {
    this.set("expires", Value.fromBigInt(value));
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get totalDepositedDAI(): BigDecimal {
    let value = this.get("totalDepositedDAI");
    return value!.toBigDecimal();
  }

  set totalDepositedDAI(value: BigDecimal) {
    this.set("totalDepositedDAI", Value.fromBigDecimal(value));
  }

  get totalDepositedETH(): BigDecimal {
    let value = this.get("totalDepositedETH");
    return value!.toBigDecimal();
  }

  set totalDepositedETH(value: BigDecimal) {
    this.set("totalDepositedETH", Value.fromBigDecimal(value));
  }

  get totalDepositedFRAX(): BigDecimal {
    let value = this.get("totalDepositedFRAX");
    return value!.toBigDecimal();
  }

  set totalDepositedFRAX(value: BigDecimal) {
    this.set("totalDepositedFRAX", Value.fromBigDecimal(value));
  }

  get totalDepositedLUSD(): BigDecimal {
    let value = this.get("totalDepositedLUSD");
    return value!.toBigDecimal();
  }

  set totalDepositedLUSD(value: BigDecimal) {
    this.set("totalDepositedLUSD", Value.fromBigDecimal(value));
  }

  get totalDepositedOHMDAI(): BigDecimal {
    let value = this.get("totalDepositedOHMDAI");
    return value!.toBigDecimal();
  }

  set totalDepositedOHMDAI(value: BigDecimal) {
    this.set("totalDepositedOHMDAI", Value.fromBigDecimal(value));
  }

  get totalDepositedOHMFRAX(): BigDecimal {
    let value = this.get("totalDepositedOHMFRAX");
    return value!.toBigDecimal();
  }

  set totalDepositedOHMFRAX(value: BigDecimal) {
    this.set("totalDepositedOHMFRAX", Value.fromBigDecimal(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    return value!.toBigInt();
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get redeemCount(): BigInt {
    let value = this.get("redeemCount");
    return value!.toBigInt();
  }

  set redeemCount(value: BigInt) {
    this.set("redeemCount", Value.fromBigInt(value));
  }
}

export class Redemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("payout", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalRedeemd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmReserve", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redemption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Redemption entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Redemption", id.toString(), this);
    }
  }

  static load(id: string): Redemption | null {
    return changetype<Redemption | null>(store.get("Redemption", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get payout(): BigDecimal {
    let value = this.get("payout");
    return value!.toBigDecimal();
  }

  set payout(value: BigDecimal) {
    this.set("payout", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get totalRedeemd(): BigDecimal {
    let value = this.get("totalRedeemd");
    return value!.toBigDecimal();
  }

  set totalRedeemd(value: BigDecimal) {
    this.set("totalRedeemd", Value.fromBigDecimal(value));
  }

  get ohmReserve(): BigDecimal {
    let value = this.get("ohmReserve");
    return value!.toBigDecimal();
  }

  set ohmReserve(value: BigDecimal) {
    this.set("ohmReserve", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class StakeYear extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolMetric", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("currentStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmie", Value.fromString(""));
    this.set("totalStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("unstakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("dayStake", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeYear entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeYear entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeYear", id.toString(), this);
    }
  }

  static load(id: string): StakeYear | null {
    return changetype<StakeYear | null>(store.get("StakeYear", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get protocolMetric(): string {
    let value = this.get("protocolMetric");
    return value!.toString();
  }

  set protocolMetric(value: string) {
    this.set("protocolMetric", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get currentStaked(): BigDecimal {
    let value = this.get("currentStaked");
    return value!.toBigDecimal();
  }

  set currentStaked(value: BigDecimal) {
    this.set("currentStaked", Value.fromBigDecimal(value));
  }

  get ohmie(): string {
    let value = this.get("ohmie");
    return value!.toString();
  }

  set ohmie(value: string) {
    this.set("ohmie", Value.fromString(value));
  }

  get totalStaked(): BigDecimal {
    let value = this.get("totalStaked");
    return value!.toBigDecimal();
  }

  set totalStaked(value: BigDecimal) {
    this.set("totalStaked", Value.fromBigDecimal(value));
  }

  get totalUnstaked(): BigDecimal {
    let value = this.get("totalUnstaked");
    return value!.toBigDecimal();
  }

  set totalUnstaked(value: BigDecimal) {
    this.set("totalUnstaked", Value.fromBigDecimal(value));
  }

  get amountStaked(): BigDecimal {
    let value = this.get("amountStaked");
    return value!.toBigDecimal();
  }

  set amountStaked(value: BigDecimal) {
    this.set("amountStaked", Value.fromBigDecimal(value));
  }

  get stakeAverage(): BigDecimal {
    let value = this.get("stakeAverage");
    return value!.toBigDecimal();
  }

  set stakeAverage(value: BigDecimal) {
    this.set("stakeAverage", Value.fromBigDecimal(value));
  }

  get stakeMax(): BigDecimal {
    let value = this.get("stakeMax");
    return value!.toBigDecimal();
  }

  set stakeMax(value: BigDecimal) {
    this.set("stakeMax", Value.fromBigDecimal(value));
  }

  get amountUnstaked(): BigDecimal {
    let value = this.get("amountUnstaked");
    return value!.toBigDecimal();
  }

  set amountUnstaked(value: BigDecimal) {
    this.set("amountUnstaked", Value.fromBigDecimal(value));
  }

  get unstakeAverage(): BigDecimal {
    let value = this.get("unstakeAverage");
    return value!.toBigDecimal();
  }

  set unstakeAverage(value: BigDecimal) {
    this.set("unstakeAverage", Value.fromBigDecimal(value));
  }

  get unstakeMax(): BigDecimal {
    let value = this.get("unstakeMax");
    return value!.toBigDecimal();
  }

  set unstakeMax(value: BigDecimal) {
    this.set("unstakeMax", Value.fromBigDecimal(value));
  }

  get stakeCount(): BigInt {
    let value = this.get("stakeCount");
    return value!.toBigInt();
  }

  set stakeCount(value: BigInt) {
    this.set("stakeCount", Value.fromBigInt(value));
  }

  get unstakeCount(): BigInt {
    let value = this.get("unstakeCount");
    return value!.toBigInt();
  }

  set unstakeCount(value: BigInt) {
    this.set("unstakeCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get dayStake(): Array<string> {
    let value = this.get("dayStake");
    return value!.toStringArray();
  }

  set dayStake(value: Array<string>) {
    this.set("dayStake", Value.fromStringArray(value));
  }
}

export class StakeDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolMetric", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("totalStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("unstakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("currentStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmie", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hourStake", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeDay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeDay entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeDay", id.toString(), this);
    }
  }

  static load(id: string): StakeDay | null {
    return changetype<StakeDay | null>(store.get("StakeDay", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get protocolMetric(): string {
    let value = this.get("protocolMetric");
    return value!.toString();
  }

  set protocolMetric(value: string) {
    this.set("protocolMetric", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get totalStaked(): BigDecimal {
    let value = this.get("totalStaked");
    return value!.toBigDecimal();
  }

  set totalStaked(value: BigDecimal) {
    this.set("totalStaked", Value.fromBigDecimal(value));
  }

  get totalUnstaked(): BigDecimal {
    let value = this.get("totalUnstaked");
    return value!.toBigDecimal();
  }

  set totalUnstaked(value: BigDecimal) {
    this.set("totalUnstaked", Value.fromBigDecimal(value));
  }

  get amountStaked(): BigDecimal {
    let value = this.get("amountStaked");
    return value!.toBigDecimal();
  }

  set amountStaked(value: BigDecimal) {
    this.set("amountStaked", Value.fromBigDecimal(value));
  }

  get stakeAverage(): BigDecimal {
    let value = this.get("stakeAverage");
    return value!.toBigDecimal();
  }

  set stakeAverage(value: BigDecimal) {
    this.set("stakeAverage", Value.fromBigDecimal(value));
  }

  get stakeMax(): BigDecimal {
    let value = this.get("stakeMax");
    return value!.toBigDecimal();
  }

  set stakeMax(value: BigDecimal) {
    this.set("stakeMax", Value.fromBigDecimal(value));
  }

  get amountUnstaked(): BigDecimal {
    let value = this.get("amountUnstaked");
    return value!.toBigDecimal();
  }

  set amountUnstaked(value: BigDecimal) {
    this.set("amountUnstaked", Value.fromBigDecimal(value));
  }

  get unstakeAverage(): BigDecimal {
    let value = this.get("unstakeAverage");
    return value!.toBigDecimal();
  }

  set unstakeAverage(value: BigDecimal) {
    this.set("unstakeAverage", Value.fromBigDecimal(value));
  }

  get unstakeMax(): BigDecimal {
    let value = this.get("unstakeMax");
    return value!.toBigDecimal();
  }

  set unstakeMax(value: BigDecimal) {
    this.set("unstakeMax", Value.fromBigDecimal(value));
  }

  get stakeCount(): BigInt {
    let value = this.get("stakeCount");
    return value!.toBigInt();
  }

  set stakeCount(value: BigInt) {
    this.set("stakeCount", Value.fromBigInt(value));
  }

  get unstakeCount(): BigInt {
    let value = this.get("unstakeCount");
    return value!.toBigInt();
  }

  set unstakeCount(value: BigInt) {
    this.set("unstakeCount", Value.fromBigInt(value));
  }

  get currentStaked(): BigDecimal {
    let value = this.get("currentStaked");
    return value!.toBigDecimal();
  }

  set currentStaked(value: BigDecimal) {
    this.set("currentStaked", Value.fromBigDecimal(value));
  }

  get ohmie(): string {
    let value = this.get("ohmie");
    return value!.toString();
  }

  set ohmie(value: string) {
    this.set("ohmie", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hourStake(): Array<string> {
    let value = this.get("hourStake");
    return value!.toStringArray();
  }

  set hourStake(value: Array<string>) {
    this.set("hourStake", Value.fromStringArray(value));
  }
}

export class StakeHour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolMetric", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("totalStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("unstakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("currentStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmie", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("minuteStake", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeHour entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeHour entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeHour", id.toString(), this);
    }
  }

  static load(id: string): StakeHour | null {
    return changetype<StakeHour | null>(store.get("StakeHour", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get protocolMetric(): string {
    let value = this.get("protocolMetric");
    return value!.toString();
  }

  set protocolMetric(value: string) {
    this.set("protocolMetric", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get totalStaked(): BigDecimal {
    let value = this.get("totalStaked");
    return value!.toBigDecimal();
  }

  set totalStaked(value: BigDecimal) {
    this.set("totalStaked", Value.fromBigDecimal(value));
  }

  get totalUnstaked(): BigDecimal {
    let value = this.get("totalUnstaked");
    return value!.toBigDecimal();
  }

  set totalUnstaked(value: BigDecimal) {
    this.set("totalUnstaked", Value.fromBigDecimal(value));
  }

  get amountStaked(): BigDecimal {
    let value = this.get("amountStaked");
    return value!.toBigDecimal();
  }

  set amountStaked(value: BigDecimal) {
    this.set("amountStaked", Value.fromBigDecimal(value));
  }

  get stakeAverage(): BigDecimal {
    let value = this.get("stakeAverage");
    return value!.toBigDecimal();
  }

  set stakeAverage(value: BigDecimal) {
    this.set("stakeAverage", Value.fromBigDecimal(value));
  }

  get stakeMax(): BigDecimal {
    let value = this.get("stakeMax");
    return value!.toBigDecimal();
  }

  set stakeMax(value: BigDecimal) {
    this.set("stakeMax", Value.fromBigDecimal(value));
  }

  get amountUnstaked(): BigDecimal {
    let value = this.get("amountUnstaked");
    return value!.toBigDecimal();
  }

  set amountUnstaked(value: BigDecimal) {
    this.set("amountUnstaked", Value.fromBigDecimal(value));
  }

  get unstakeAverage(): BigDecimal {
    let value = this.get("unstakeAverage");
    return value!.toBigDecimal();
  }

  set unstakeAverage(value: BigDecimal) {
    this.set("unstakeAverage", Value.fromBigDecimal(value));
  }

  get unstakeMax(): BigDecimal {
    let value = this.get("unstakeMax");
    return value!.toBigDecimal();
  }

  set unstakeMax(value: BigDecimal) {
    this.set("unstakeMax", Value.fromBigDecimal(value));
  }

  get stakeCount(): BigInt {
    let value = this.get("stakeCount");
    return value!.toBigInt();
  }

  set stakeCount(value: BigInt) {
    this.set("stakeCount", Value.fromBigInt(value));
  }

  get unstakeCount(): BigInt {
    let value = this.get("unstakeCount");
    return value!.toBigInt();
  }

  set unstakeCount(value: BigInt) {
    this.set("unstakeCount", Value.fromBigInt(value));
  }

  get currentStaked(): BigDecimal {
    let value = this.get("currentStaked");
    return value!.toBigDecimal();
  }

  set currentStaked(value: BigDecimal) {
    this.set("currentStaked", Value.fromBigDecimal(value));
  }

  get ohmie(): string {
    let value = this.get("ohmie");
    return value!.toString();
  }

  set ohmie(value: string) {
    this.set("ohmie", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get minuteStake(): Array<string> {
    let value = this.get("minuteStake");
    return value!.toStringArray();
  }

  set minuteStake(value: Array<string>) {
    this.set("minuteStake", Value.fromStringArray(value));
  }
}

export class StakeMinute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolMetric", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("totalStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("unstakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("currentStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmie", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("secondStake", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeMinute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeMinute entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeMinute", id.toString(), this);
    }
  }

  static load(id: string): StakeMinute | null {
    return changetype<StakeMinute | null>(store.get("StakeMinute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get protocolMetric(): string {
    let value = this.get("protocolMetric");
    return value!.toString();
  }

  set protocolMetric(value: string) {
    this.set("protocolMetric", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get totalStaked(): BigDecimal {
    let value = this.get("totalStaked");
    return value!.toBigDecimal();
  }

  set totalStaked(value: BigDecimal) {
    this.set("totalStaked", Value.fromBigDecimal(value));
  }

  get totalUnstaked(): BigDecimal {
    let value = this.get("totalUnstaked");
    return value!.toBigDecimal();
  }

  set totalUnstaked(value: BigDecimal) {
    this.set("totalUnstaked", Value.fromBigDecimal(value));
  }

  get amountStaked(): BigDecimal {
    let value = this.get("amountStaked");
    return value!.toBigDecimal();
  }

  set amountStaked(value: BigDecimal) {
    this.set("amountStaked", Value.fromBigDecimal(value));
  }

  get stakeAverage(): BigDecimal {
    let value = this.get("stakeAverage");
    return value!.toBigDecimal();
  }

  set stakeAverage(value: BigDecimal) {
    this.set("stakeAverage", Value.fromBigDecimal(value));
  }

  get stakeMax(): BigDecimal {
    let value = this.get("stakeMax");
    return value!.toBigDecimal();
  }

  set stakeMax(value: BigDecimal) {
    this.set("stakeMax", Value.fromBigDecimal(value));
  }

  get amountUnstaked(): BigDecimal {
    let value = this.get("amountUnstaked");
    return value!.toBigDecimal();
  }

  set amountUnstaked(value: BigDecimal) {
    this.set("amountUnstaked", Value.fromBigDecimal(value));
  }

  get unstakeAverage(): BigDecimal {
    let value = this.get("unstakeAverage");
    return value!.toBigDecimal();
  }

  set unstakeAverage(value: BigDecimal) {
    this.set("unstakeAverage", Value.fromBigDecimal(value));
  }

  get unstakeMax(): BigDecimal {
    let value = this.get("unstakeMax");
    return value!.toBigDecimal();
  }

  set unstakeMax(value: BigDecimal) {
    this.set("unstakeMax", Value.fromBigDecimal(value));
  }

  get stakeCount(): BigInt {
    let value = this.get("stakeCount");
    return value!.toBigInt();
  }

  set stakeCount(value: BigInt) {
    this.set("stakeCount", Value.fromBigInt(value));
  }

  get unstakeCount(): BigInt {
    let value = this.get("unstakeCount");
    return value!.toBigInt();
  }

  set unstakeCount(value: BigInt) {
    this.set("unstakeCount", Value.fromBigInt(value));
  }

  get currentStaked(): BigDecimal {
    let value = this.get("currentStaked");
    return value!.toBigDecimal();
  }

  set currentStaked(value: BigDecimal) {
    this.set("currentStaked", Value.fromBigDecimal(value));
  }

  get ohmie(): string {
    let value = this.get("ohmie");
    return value!.toString();
  }

  set ohmie(value: string) {
    this.set("ohmie", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get secondStake(): Array<string> {
    let value = this.get("secondStake");
    return value!.toStringArray();
  }

  set secondStake(value: Array<string>) {
    this.set("secondStake", Value.fromStringArray(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolMetric", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("totalStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeAverage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeMax", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("unstakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("currentStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("ohmie", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stake", id.toString(), this);
    }
  }

  static load(id: string): Stake | null {
    return changetype<Stake | null>(store.get("Stake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get protocolMetric(): string {
    let value = this.get("protocolMetric");
    return value!.toString();
  }

  set protocolMetric(value: string) {
    this.set("protocolMetric", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get totalStaked(): BigDecimal {
    let value = this.get("totalStaked");
    return value!.toBigDecimal();
  }

  set totalStaked(value: BigDecimal) {
    this.set("totalStaked", Value.fromBigDecimal(value));
  }

  get totalUnstaked(): BigDecimal {
    let value = this.get("totalUnstaked");
    return value!.toBigDecimal();
  }

  set totalUnstaked(value: BigDecimal) {
    this.set("totalUnstaked", Value.fromBigDecimal(value));
  }

  get amountStaked(): BigDecimal {
    let value = this.get("amountStaked");
    return value!.toBigDecimal();
  }

  set amountStaked(value: BigDecimal) {
    this.set("amountStaked", Value.fromBigDecimal(value));
  }

  get stakeAverage(): BigDecimal {
    let value = this.get("stakeAverage");
    return value!.toBigDecimal();
  }

  set stakeAverage(value: BigDecimal) {
    this.set("stakeAverage", Value.fromBigDecimal(value));
  }

  get stakeMax(): BigDecimal {
    let value = this.get("stakeMax");
    return value!.toBigDecimal();
  }

  set stakeMax(value: BigDecimal) {
    this.set("stakeMax", Value.fromBigDecimal(value));
  }

  get amountUnstaked(): BigDecimal {
    let value = this.get("amountUnstaked");
    return value!.toBigDecimal();
  }

  set amountUnstaked(value: BigDecimal) {
    this.set("amountUnstaked", Value.fromBigDecimal(value));
  }

  get unstakeAverage(): BigDecimal {
    let value = this.get("unstakeAverage");
    return value!.toBigDecimal();
  }

  set unstakeAverage(value: BigDecimal) {
    this.set("unstakeAverage", Value.fromBigDecimal(value));
  }

  get unstakeMax(): BigDecimal {
    let value = this.get("unstakeMax");
    return value!.toBigDecimal();
  }

  set unstakeMax(value: BigDecimal) {
    this.set("unstakeMax", Value.fromBigDecimal(value));
  }

  get stakeCount(): BigInt {
    let value = this.get("stakeCount");
    return value!.toBigInt();
  }

  set stakeCount(value: BigInt) {
    this.set("stakeCount", Value.fromBigInt(value));
  }

  get unstakeCount(): BigInt {
    let value = this.get("unstakeCount");
    return value!.toBigInt();
  }

  set unstakeCount(value: BigInt) {
    this.set("unstakeCount", Value.fromBigInt(value));
  }

  get currentStaked(): BigDecimal {
    let value = this.get("currentStaked");
    return value!.toBigDecimal();
  }

  set currentStaked(value: BigDecimal) {
    this.set("currentStaked", Value.fromBigDecimal(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get ohmie(): string {
    let value = this.get("ohmie");
    return value!.toString();
  }

  set ohmie(value: string) {
    this.set("ohmie", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Unstake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocolMetric", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("totalUnstaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("unstakeCount", Value.fromBigInt(BigInt.zero()));
    this.set("currentStaked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unstake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Unstake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Unstake", id.toString(), this);
    }
  }

  static load(id: string): Unstake | null {
    return changetype<Unstake | null>(store.get("Unstake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolMetric(): string {
    let value = this.get("protocolMetric");
    return value!.toString();
  }

  set protocolMetric(value: string) {
    this.set("protocolMetric", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get totalUnstaked(): BigDecimal {
    let value = this.get("totalUnstaked");
    return value!.toBigDecimal();
  }

  set totalUnstaked(value: BigDecimal) {
    this.set("totalUnstaked", Value.fromBigDecimal(value));
  }

  get unstakeCount(): BigInt {
    let value = this.get("unstakeCount");
    return value!.toBigInt();
  }

  set unstakeCount(value: BigInt) {
    this.set("unstakeCount", Value.fromBigInt(value));
  }

  get currentStaked(): BigDecimal {
    let value = this.get("currentStaked");
    return value!.toBigDecimal();
  }

  set currentStaked(value: BigDecimal) {
    this.set("currentStaked", Value.fromBigDecimal(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PriceChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("priceInUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("internalPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ratio", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PriceChange entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PriceChange", id.toString(), this);
    }
  }

  static load(id: string): PriceChange | null {
    return changetype<PriceChange | null>(store.get("PriceChange", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get priceInUSD(): BigDecimal {
    let value = this.get("priceInUSD");
    return value!.toBigDecimal();
  }

  set priceInUSD(value: BigDecimal) {
    this.set("priceInUSD", Value.fromBigDecimal(value));
  }

  get internalPrice(): BigDecimal {
    let value = this.get("internalPrice");
    return value!.toBigDecimal();
  }

  set internalPrice(value: BigDecimal) {
    this.set("internalPrice", Value.fromBigDecimal(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    return value!.toBigDecimal();
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class VariableAdjustment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("initialBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("newBCV", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("adjustment", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("addition", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VariableAdjustment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VariableAdjustment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VariableAdjustment", id.toString(), this);
    }
  }

  static load(id: string): VariableAdjustment | null {
    return changetype<VariableAdjustment | null>(
      store.get("VariableAdjustment", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get initialBCV(): BigDecimal {
    let value = this.get("initialBCV");
    return value!.toBigDecimal();
  }

  set initialBCV(value: BigDecimal) {
    this.set("initialBCV", Value.fromBigDecimal(value));
  }

  get newBCV(): BigDecimal {
    let value = this.get("newBCV");
    return value!.toBigDecimal();
  }

  set newBCV(value: BigDecimal) {
    this.set("newBCV", Value.fromBigDecimal(value));
  }

  get adjustment(): BigDecimal {
    let value = this.get("adjustment");
    return value!.toBigDecimal();
  }

  set adjustment(value: BigDecimal) {
    this.set("adjustment", Value.fromBigDecimal(value));
  }

  get addition(): boolean {
    let value = this.get("addition");
    return value!.toBoolean();
  }

  set addition(value: boolean) {
    this.set("addition", Value.fromBoolean(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyStakingReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("value", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStakingReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyStakingReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyStakingReward", id.toString(), this);
    }
  }

  static load(id: string): DailyStakingReward | null {
    return changetype<DailyStakingReward | null>(
      store.get("DailyStakingReward", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value!.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockHash", Value.fromBytes(Bytes.empty()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockHash(): Bytes {
    let value = this.get("blockHash");
    return value!.toBytes();
  }

  set blockHash(value: Bytes) {
    this.set("blockHash", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ProtocolMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ohmCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("sOhmCirculatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("ohmPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("nextEpochRebase", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("nextDistributedOhm", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryDaiRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryFraxRiskFreeValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("treasuryDaiMarketValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "treasuryFraxMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryXsushiMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "treasuryWETHMarketValue",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("currentAPY", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryOhmDaiPOL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("treasuryOhmFraxPOL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("holders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProtocolMetric entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProtocolMetric", id.toString(), this);
    }
  }

  static load(id: string): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(store.get("ProtocolMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmCirculatingSupply(): BigDecimal {
    let value = this.get("ohmCirculatingSupply");
    return value!.toBigDecimal();
  }

  set ohmCirculatingSupply(value: BigDecimal) {
    this.set("ohmCirculatingSupply", Value.fromBigDecimal(value));
  }

  get sOhmCirculatingSupply(): BigDecimal {
    let value = this.get("sOhmCirculatingSupply");
    return value!.toBigDecimal();
  }

  set sOhmCirculatingSupply(value: BigDecimal) {
    this.set("sOhmCirculatingSupply", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get ohmPrice(): BigDecimal {
    let value = this.get("ohmPrice");
    return value!.toBigDecimal();
  }

  set ohmPrice(value: BigDecimal) {
    this.set("ohmPrice", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get treasuryRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryRiskFreeValue(value: BigDecimal) {
    this.set("treasuryRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryMarketValue(): BigDecimal {
    let value = this.get("treasuryMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryMarketValue(value: BigDecimal) {
    this.set("treasuryMarketValue", Value.fromBigDecimal(value));
  }

  get nextEpochRebase(): BigDecimal {
    let value = this.get("nextEpochRebase");
    return value!.toBigDecimal();
  }

  set nextEpochRebase(value: BigDecimal) {
    this.set("nextEpochRebase", Value.fromBigDecimal(value));
  }

  get nextDistributedOhm(): BigDecimal {
    let value = this.get("nextDistributedOhm");
    return value!.toBigDecimal();
  }

  set nextDistributedOhm(value: BigDecimal) {
    this.set("nextDistributedOhm", Value.fromBigDecimal(value));
  }

  get treasuryDaiRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryDaiRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryDaiRiskFreeValue(value: BigDecimal) {
    this.set("treasuryDaiRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryFraxRiskFreeValue(): BigDecimal {
    let value = this.get("treasuryFraxRiskFreeValue");
    return value!.toBigDecimal();
  }

  set treasuryFraxRiskFreeValue(value: BigDecimal) {
    this.set("treasuryFraxRiskFreeValue", Value.fromBigDecimal(value));
  }

  get treasuryDaiMarketValue(): BigDecimal {
    let value = this.get("treasuryDaiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryDaiMarketValue(value: BigDecimal) {
    this.set("treasuryDaiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryFraxMarketValue(): BigDecimal {
    let value = this.get("treasuryFraxMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryFraxMarketValue(value: BigDecimal) {
    this.set("treasuryFraxMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryXsushiMarketValue(): BigDecimal {
    let value = this.get("treasuryXsushiMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryXsushiMarketValue(value: BigDecimal) {
    this.set("treasuryXsushiMarketValue", Value.fromBigDecimal(value));
  }

  get treasuryWETHMarketValue(): BigDecimal {
    let value = this.get("treasuryWETHMarketValue");
    return value!.toBigDecimal();
  }

  set treasuryWETHMarketValue(value: BigDecimal) {
    this.set("treasuryWETHMarketValue", Value.fromBigDecimal(value));
  }

  get currentAPY(): BigDecimal {
    let value = this.get("currentAPY");
    return value!.toBigDecimal();
  }

  set currentAPY(value: BigDecimal) {
    this.set("currentAPY", Value.fromBigDecimal(value));
  }

  get runway10k(): BigDecimal | null {
    let value = this.get("runway10k");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set runway10k(value: BigDecimal | null) {
    if (!value) {
      this.unset("runway10k");
    } else {
      this.set("runway10k", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get runway20k(): BigDecimal | null {
    let value = this.get("runway20k");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set runway20k(value: BigDecimal | null) {
    if (!value) {
      this.unset("runway20k");
    } else {
      this.set("runway20k", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get runway50k(): BigDecimal | null {
    let value = this.get("runway50k");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set runway50k(value: BigDecimal | null) {
    if (!value) {
      this.unset("runway50k");
    } else {
      this.set("runway50k", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get runway70k(): BigDecimal | null {
    let value = this.get("runway70k");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set runway70k(value: BigDecimal | null) {
    if (!value) {
      this.unset("runway70k");
    } else {
      this.set("runway70k", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get runway100k(): BigDecimal | null {
    let value = this.get("runway100k");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set runway100k(value: BigDecimal | null) {
    if (!value) {
      this.unset("runway100k");
    } else {
      this.set("runway100k", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get runwayCurrent(): BigDecimal | null {
    let value = this.get("runwayCurrent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set runwayCurrent(value: BigDecimal | null) {
    if (!value) {
      this.unset("runwayCurrent");
    } else {
      this.set("runwayCurrent", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get treasuryOhmDaiPOL(): BigDecimal {
    let value = this.get("treasuryOhmDaiPOL");
    return value!.toBigDecimal();
  }

  set treasuryOhmDaiPOL(value: BigDecimal) {
    this.set("treasuryOhmDaiPOL", Value.fromBigDecimal(value));
  }

  get treasuryOhmFraxPOL(): BigDecimal {
    let value = this.get("treasuryOhmFraxPOL");
    return value!.toBigDecimal();
  }

  set treasuryOhmFraxPOL(value: BigDecimal) {
    this.set("treasuryOhmFraxPOL", Value.fromBigDecimal(value));
  }

  get holders(): BigInt {
    let value = this.get("holders");
    return value!.toBigInt();
  }

  set holders(value: BigInt) {
    this.set("holders", Value.fromBigInt(value));
  }
}

export class ContractInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContractInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ContractInfo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ContractInfo", id.toString(), this);
    }
  }

  static load(id: string): ContractInfo | null {
    return changetype<ContractInfo | null>(store.get("ContractInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (!value) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Aux extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Aux entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Aux entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Aux", id.toString(), this);
    }
  }

  static load(id: string): Aux | null {
    return changetype<Aux | null>(store.get("Aux", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class Rebase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakedOhms", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("percentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("contract", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("profit", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rebase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Rebase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Rebase", id.toString(), this);
    }
  }

  static load(id: string): Rebase | null {
    return changetype<Rebase | null>(store.get("Rebase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get stakedOhms(): BigDecimal {
    let value = this.get("stakedOhms");
    return value!.toBigDecimal();
  }

  set stakedOhms(value: BigDecimal) {
    this.set("stakedOhms", Value.fromBigDecimal(value));
  }

  get percentage(): BigDecimal {
    let value = this.get("percentage");
    return value!.toBigDecimal();
  }

  set percentage(value: BigDecimal) {
    this.set("percentage", Value.fromBigDecimal(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get profit(): BigDecimal {
    let value = this.get("profit");
    return value!.toBigDecimal();
  }

  set profit(value: BigDecimal) {
    this.set("profit", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class RebaseYear extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakedOhms", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("percentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("contract", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("profit", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dayRebase", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RebaseYear entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RebaseYear entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RebaseYear", id.toString(), this);
    }
  }

  static load(id: string): RebaseYear | null {
    return changetype<RebaseYear | null>(store.get("RebaseYear", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get stakedOhms(): BigDecimal {
    let value = this.get("stakedOhms");
    return value!.toBigDecimal();
  }

  set stakedOhms(value: BigDecimal) {
    this.set("stakedOhms", Value.fromBigDecimal(value));
  }

  get percentage(): BigDecimal {
    let value = this.get("percentage");
    return value!.toBigDecimal();
  }

  set percentage(value: BigDecimal) {
    this.set("percentage", Value.fromBigDecimal(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get profit(): BigDecimal {
    let value = this.get("profit");
    return value!.toBigDecimal();
  }

  set profit(value: BigDecimal) {
    this.set("profit", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get dayRebase(): Array<string> {
    let value = this.get("dayRebase");
    return value!.toStringArray();
  }

  set dayRebase(value: Array<string>) {
    this.set("dayRebase", Value.fromStringArray(value));
  }
}

export class RebaseDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stakedOhms", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("percentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("contract", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("profit", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourRebase", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RebaseDay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RebaseDay entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RebaseDay", id.toString(), this);
    }
  }

  static load(id: string): RebaseDay | null {
    return changetype<RebaseDay | null>(store.get("RebaseDay", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get stakedOhms(): BigDecimal {
    let value = this.get("stakedOhms");
    return value!.toBigDecimal();
  }

  set stakedOhms(value: BigDecimal) {
    this.set("stakedOhms", Value.fromBigDecimal(value));
  }

  get percentage(): BigDecimal {
    let value = this.get("percentage");
    return value!.toBigDecimal();
  }

  set percentage(value: BigDecimal) {
    this.set("percentage", Value.fromBigDecimal(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get profit(): BigDecimal {
    let value = this.get("profit");
    return value!.toBigDecimal();
  }

  set profit(value: BigDecimal) {
    this.set("profit", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get hourRebase(): Array<string> {
    let value = this.get("hourRebase");
    return value!.toStringArray();
  }

  set hourRebase(value: Array<string>) {
    this.set("hourRebase", Value.fromStringArray(value));
  }
}
